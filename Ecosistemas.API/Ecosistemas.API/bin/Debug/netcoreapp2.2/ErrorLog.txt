DateTime : 29/01/2019 08:05:44


MessageBlockSize must be 128 in this implementation.

StackTrace   at System.Security.Cryptography.RijndaelManaged.set_BlockSize(Int32 value)
   at Ecosistemas.API.Security.CryptoHelper.Encrypt(String plainText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 76
DateTime : 29/01/2019 08:06:23


MessageSalt is not at least eight bytes.
Parameter name: salt

StackTrace   at System.Security.Cryptography.Rfc2898DeriveBytes..ctor(Byte[] password, Byte[] salt, Int32 iterations, HashAlgorithmName hashAlgorithm)
   at System.Security.Cryptography.Rfc2898DeriveBytes..ctor(String password, Byte[] salt, Int32 iterations)
   at Ecosistemas.API.Security.CryptoHelper.Decrypt(String cipherText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 123
DateTime : 29/01/2019 08:08:14


MessageBlockSize must be 128 in this implementation.

StackTrace   at System.Security.Cryptography.RijndaelManaged.set_BlockSize(Int32 value)
   at Ecosistemas.API.Security.CryptoHelper.Encrypt(String plainText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 76
DateTime : 29/01/2019 08:08:14


MessageSalt is not at least eight bytes.
Parameter name: salt

StackTrace   at System.Security.Cryptography.Rfc2898DeriveBytes..ctor(Byte[] password, Byte[] salt, Int32 iterations, HashAlgorithmName hashAlgorithm)
   at System.Security.Cryptography.Rfc2898DeriveBytes..ctor(String password, Byte[] salt, Int32 iterations)
   at Ecosistemas.API.Security.CryptoHelper.Decrypt(String cipherText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 123
DateTime : 29/01/2019 08:08:45


MessageBlockSize must be 128 in this implementation.

StackTrace   at System.Security.Cryptography.RijndaelManaged.set_BlockSize(Int32 value)
   at Ecosistemas.API.Security.CryptoHelper.Encrypt(String plainText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 76
DateTime : 29/01/2019 08:09:53


MessageBlockSize must be 128 in this implementation.

StackTrace   at System.Security.Cryptography.RijndaelManaged.set_BlockSize(Int32 value)
   at Ecosistemas.API.Security.CryptoHelper.Encrypt(String plainText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 76
DateTime : 29/01/2019 08:09:53


MessageSalt is not at least eight bytes.
Parameter name: salt

StackTrace   at System.Security.Cryptography.Rfc2898DeriveBytes..ctor(Byte[] password, Byte[] salt, Int32 iterations, HashAlgorithmName hashAlgorithm)
   at System.Security.Cryptography.Rfc2898DeriveBytes..ctor(String password, Byte[] salt, Int32 iterations)
   at Ecosistemas.API.Security.CryptoHelper.Decrypt(String cipherText) in C:\Users\willian.possenti\source\repos\Ecosistemas.API\Ecosistemas.API\Security\CryptoHelper.cs:line 123
DateTime : 05/02/2019 14:08:16


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Remover(Guid Id, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 94

Inner Exception : The DELETE statement conflicted with the REFERENCE constraint "FK_UserRoles_Users_UserId". The conflict occurred in database "DESENVOLVIMENTO_WILLIAN", table "dbo.UserRoles", column 'UserId'.
The statement has been terminated.
------******------
DateTime : 05/02/2019 14:13:29


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Remover(Guid Id, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 94

Inner Exception : The DELETE statement conflicted with the REFERENCE constraint "FK_UserRoles_Users_UserId". The conflict occurred in database "DESENVOLVIMENTO_WILLIAN", table "dbo.UserRoles", column 'UserId'.
The statement has been terminated.
------******------
DateTime : 05/02/2019 14:14:14


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Remover(Guid Id, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 94

Inner Exception : The DELETE statement conflicted with the REFERENCE constraint "FK_UserRoles_Users_UserId". The conflict occurred in database "DESENVOLVIMENTO_WILLIAN", table "dbo.UserRoles", column 'UserId'.
The statement has been terminated.
------******------
DateTime : 11/02/2019 09:30:57


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 32

Inner Exception : Cannot insert the value NULL into column 'ConfirmPassword', table 'DESENVOLVIMENTO_WILLIAN.dbo.Users'; column does not allow nulls. INSERT fails.
The statement has been terminated.
------******------
DateTime : 11/02/2019 09:33:48


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 32

Inner Exception : Cannot insert the value NULL into column 'ConfirmPassword', table 'DESENVOLVIMENTO_WILLIAN.dbo.Users'; column does not allow nulls. INSERT fails.
The statement has been terminated.
------******------
DateTime : 11/02/2019 09:49:08


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 32

Inner Exception : Cannot insert the value NULL into column 'ConfirmPassword', table 'DESENVOLVIMENTO_WILLIAN.dbo.Users'; column does not allow nulls. INSERT fails.
The statement has been terminated.
------******------
DateTime : 11/02/2019 10:49:28


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 32

Inner Exception : Cannot insert the value NULL into column 'ConfirmPassword', table 'DESENVOLVIMENTO_WILLIAN.dbo.Users'; column does not allow nulls. INSERT fails.
The statement has been terminated.
------******------
DateTime : 11/02/2019 10:52:08


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'CatalogoDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 32
DateTime : 11/02/2019 10:52:08


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'CatalogoDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 52
DateTime : 11/02/2019 11:00:06


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\BaseService.cs:line 32

Inner Exception : Cannot insert the value NULL into column 'ConfirmPassword', table 'DESENVOLVIMENTO_WILLIAN.dbo.Users'; column does not allow nulls. INSERT fails.
The statement has been terminated.
------******------
DateTime : 13/02/2019 15:27:43


MessageAn error occurred while updating the entries. See the inner exception for details.

StackTrace   at Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(IRelationalConnection connection, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(DbContext _, ValueTuple`2 parameters, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(IReadOnlyList`1 entriesToSave, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 53

Inner Exception : Violation of PRIMARY KEY constraint 'PK_Estados'. Cannot insert duplicate key in object 'dbo.Estados'. The duplicate key value is (74ca5e30-d3f3-484a-a3c3-c9101ef260d0).
The statement has been terminated.
------******------
DateTime : 13/02/2019 16:23:36


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.get_DbContextDependencies()
   at Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(Boolean acceptAllChangesOnSuccess, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 53
DateTime : 13/02/2019 16:23:36


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:36


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddAsync[TEntity](TEntity entity, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 31
DateTime : 13/02/2019 16:23:36


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:36


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:36


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:37


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:37


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:37


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:37


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:37


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:38


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:38


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:38


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:38


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:38


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:39


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:39


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:39


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:39


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:40


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:40


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 16:23:40


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:15


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:15


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:15


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddAsync[TEntity](TEntity entity, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.Adicionar(T entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 31
DateTime : 13/02/2019 17:08:15


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:15


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:16


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:16


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:16


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:16


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:16


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:17


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:17


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:17


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:17


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:17


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:18


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:18


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:18


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:18


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:18


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:19


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:19


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
DateTime : 13/02/2019 17:08:19


MessageCannot access a disposed object. A common cause of this error is disposing a context that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application. This may occur if you are calling Dispose() on the context, or wrapping the context in a using statement. If you are using dependency injection, you should let the dependency injection container take care of disposing context instances.
Object name: 'KlinikosDbContext'.

StackTrace   at Microsoft.EntityFrameworkCore.DbContext.CheckDisposed()
   at Microsoft.EntityFrameworkCore.DbContext.AddRangeAsync(IEnumerable`1 entities, CancellationToken cancellationToken)
   at Ecosistemas.Business.Services.Klinikos.BaseService`1.AdicionarRange(List`1 entity, Guid UserId) in D:\API\Ecosistemas.API\Ecosistemas.Business\Services\Klinikos\BaseService.cs:line 52
